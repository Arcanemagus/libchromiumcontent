resources:
- repo: self
phases:
- phase: Build_libchromiumcontent
  condition: or(eq(variables['System.PullRequest.IsFork'], 'True'), ne(variables['Build.Reason'], 'PullRequest'))
  queue:
    timeoutInMinutes: 180
  steps:
  - bash: |
     set -e
     if [[ -z "${SYSTEM_PULLREQUEST_PULLREQUESTNUMBER}" ]] || "${SYSTEM_PULLREQUEST_ISFORK}" == "True"; then
       echo "##vso[task.setvariable variable=gitcommit]$BUILD_SOURCEVERSION"
     else
       tmp="${BUILD_SOURCEVERSIONMESSAGE/#Merge /}"
       PR_COMMIT_ID="${tmp%% into*}"
       echo "PR is for repo branch, using original commit $PR_COMMIT_ID"
       echo "##vso[task.setvariable variable=gitcommit]$PR_COMMIT_ID"
       echo "Checking out $PR_COMMIT_ID"
       git checkout $PR_COMMIT_ID
       echo "Now switched to `git rev-parse HEAD`"
     fi
    name: Get_commit

  - bash: |
     set -e
     echo "===Bootstrapping===" > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
     script/bootstrap > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
     mkdir s3files
    name: Bootstrap

  - bash: |
     echo "===Updating for $TARGET_ARCH===" > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
     script/update --clean -t $TARGET_ARCH > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
    name: Update

  - bash: |
     echo "===Building $COMPONENT for $TARGET_ARCH===" > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
     script/build -t $TARGET_ARCH -c $COMPONENT > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
    name: Build_library

  - bash: |
     echo "===Building ffmpeg for $TARGET_ARCH===" > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
     script/build -t $TARGET_ARCH -c ffmpeg > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
    name: Build_ffmpeg

  - bash: |
     echo "===Create $COMPONENT distribution for $TARGET_ARCH===" > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
     script/create-dist -t $TARGET_ARCH -c $COMPONENT > >(tee -a buildlog.txt) 2> >(tee -a buildlog.txt >&2)
     mv libchromiumcontent* s3files
     mv buildlog.txt s3files
    name: Create_distribution

  - task: AmazonWebServices.aws-vsts-tools.S3Upload.S3Upload@1
    inputs:
      awsCredentials: 'Libchromium Content S3'
      regionName: 'us-east-1'
      bucketName: 'github-janky-artifacts'
      sourceFolder: s3files
      globExpressions: 'libchromiumcontent*'
      targetFolder: 'libchromiumcontent/$(TARGET_TYPE)/$(TARGET_ARCH)/$(gitcommit)'
      filesAcl: 'public-read'
      logRequest: true
      logResponse: true

  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    condition: always()
